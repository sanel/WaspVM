+ BUG: core/io depends on lib/iterate
+ BUG: waspvm depends on libevent shared object on Linux.
+ BUG: waspvm does not build in 64 bit environments.

+ UGLY: Stop casts to wasp_proc_fn by using the correct type for wasp_process.
+ UGLY: printf object used as value since printf doesn't support objects.

????/??/?? 64 Bit Phase Two Support
  + Add a new 64 bit value to thaw.
  + Add a new 64 bit value to freeze.
  + Adjust MAX_IMM, MAX_INT based on ptr size.  ( 2 ** ( sizeof( void* ) - 1 ) -1 )
  + Introduce a longlong to the wasp number stack for 32-bits to interop with 64-bits.

????/??/?? Buffer Restoration
  + Forked string and buffer types again.
  + Strings are now immutable at a primitive level.
  + All string-*! primitives are now buffer-* primitives.
  + Added buffer->string primitive.
  + Buffers are compared by address, strings by content.
    
????/??/?? Improvements to WaspDoc
  + Modified waspdoc check source to consume a root directory argument.
  + Added glob-files primitive.
  + Modified waspdoc/ms-file to document macros.
  + Modified waspdoc/c-file to document primitive functions.
  + Modified waspdoc/c-file to document primitive types.

????/??/?? Improved I/O loop
  + Add SO_REUSEADDR socket option to services.
  + Removed libevent
  + Wrote API emulating win32 completion-driven semantics on unix.
  + Ported I/O loop to mac os x.
  + Enabled truly asynchronous TCP connection semantics.
  + Moved win32 console I/O logic out.

+ BUG: (format '(1 2 3)) yields "(1)" when vm built with -Os, -O3, ...
  + Does not happen with -O1, -O2 and -O0

+ Add Generational GC
  + Ensure NO direct modifications are done of object properties.
    + Rename each property to zxz_ <property>
    + Compile and fix all broken zxz_ references.
  + For each direct modification, gc_check_eph( parent, child ) must be called.
  + New objects are in the Ephemeral pool.
  + When a non-ephemeral object gets a reference to an ephemeral, the ephemeral becomes 
    grey.
  + After each instruction, all greys are traced, making them white.  Any remaining ephemerals
    are freed.

- Add the (ensure cleanup stmt ...) macro.
  Emulates the common (guard (lambda (err) cleanup (re-error err)) ...) idiom.

- Explicitly free all objects at shutdown.
  - Ensures that listeners will close, etc.

- Fix serious problems in trace / free inheritance.
  This is seriously not working, and could be disastrous if a later 
  change to a root class isn't accounted for by a derived class.

- Add "dump-object" which dumps a lib/object object field by field.

- Add system channels
  UNIX and WIN32 named pipes, serial ports.

- BUG: parsing a single dot outside parenthesis should not be an incomplete error.

- WaspDoc Document Macros

- WaspDoc Document Primitives

- WaspDoc Edit Module Export
  - Backport editor support from MOSREF

- Spot-Coverage
  Scripts using gcov and vim to identify untested portions of primitives.

- Does list append need to resemble set-append and string-append ?

- Move string mutation back into buffer subsystem.
  Too complicated to explain to users why they shouldn't mutate borrowed strings.
  Remove -bang appellation for mutation.
  Buffer basic functionality stays in VM -- used by format and print.

  - Rename all "(.*)string(.*)!$" to "\1buffer\2$"
  - Rename all string_append to buffer_append
  - Rename all string_read to buffer_read
  - Check all indirect uses of wasp_string_alter
  - Rename copy-string to string->buffer
  - Add buffer->string

  ? Should non-destructive string operations work on buffers?

- WaspDoc renders markup to ASCII
- WaspDoc renders markup to HTML
- WaspDoc renders markup to PDF

- WaspDoc documents subsystems.

- Inhibit subsystem warning in standalone compiler in install mode..

- Polishing Words
  Neal Stephenson in his "In the Beginning.. There Was the Command Line" essay, asserts that the
  terseness of directory names in UNIX is similar to the smoothing of river stones.  By buffing
  out irregularities in frequently used Lisp forms, we can make the language more approachable. 
  See also Paul Graham for more inspiration from his Arc language ideas.

  - Rename define of variables to def.
  - Rename define of functions to def-fn
  - Rename define of methods to def-mt
  - Rename function to fn
  - Rename set! to set
  - Add var form
    var declares locality of a variable when def would not do.
  - Kill let / letrec / let* !

- Add pcase -- predicate case
  (pcase arg
    ((vector? record? object?) (vector-iter (repr arg)))
    ((dict? set?) (tree-iter (repr arg)))
    ...)

- Add make-error, forward-errors
  make-error captures the context and the content, but does not propagate the guard chain.
  forward-errors is a form that sends any caught error to a channel.

- Modify wait to propagate errors.
  If an error is received by wait, it is propagated upwards from wait.

- Clarify -add vs. -append.
  Add is an arithmetic operation.  
  Append is concatenation of individual items.
  Concat is concatenation of sequences.

  (conc '(a b c) '(1 2 3)) -> (a b c 1 2 3)
  (append '(a b c) '(1 2 3)) -> (a b c (1 2 3))
  
  - Do we need to rename string-append-xxx! ??

- Should equal? v. eq? be removed, too?
  Strings compared by length, hash then content.
  Other objects compared by identity.
  Does away with assq, assoc, etc.

- Clarify verb-noun vs. noun-verb in primitive names?
  Why do we have tc-add and not add-tc, yet we have send-output?

- Wasp Stubs, Library, Subsystems:
  - Generate a shared libwasp.
  - Generate a static libwasp.
  - Generate a static waspvm that can be used for standalone compilation.
    - Must export all symbols for loaded subsystems.
    - May want to enable ability to link subsystems in hard, too.
      - Use ld to link them in..
      - 
  - Restore the Subsystem loading code.

